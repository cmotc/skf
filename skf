#!/usr/bin/env bash

#  skf
#  
#  Copyright 2013 Samir Chaouki <moebius.eye@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

 
export SHARE_DIR="/usr/share/skf"

[[ -d $SHARE_DIR ]] || {
    echo "Share directory does not exist. skf was not installed properly. "
    exit 1 
}

HELP=\
'skf [-f] [-r|--recursive] (--watch|-w) SRC_DIR DST_DIR          # "watch" mode
skf [-f] [-r|--recursive] (--generate|-g) SRC_DIR DST_DIR       # "generate" mode
skf (-i|--init)                                                 # create website 
skf (-d)                                                        # debug
skf (-h|--help)                                                 # print help 
Warning: DST_DIR should be the last argument. '

# Argument list cannot be empty 
if [[ -z $@ ]]
then
    echo "$HELP"
    exit
fi

while getopts "w:g:dhirf-:" arg
do
    if [[ $arg == '-' ]]
    then
        arg="$OPTARG"
        CURARG="${!OPTIND}"
        [[ ${CURARG:0:1} == '-' ]] || {
            OPTARG="${!OPTIND}"
            ((OPTIND+=1))
        }
    fi
    
    case $arg in
        
        "d"|"debug" ) 
            export DEBUG=1 
            ;;
        
        "h"|"help" ) # Print help and exit 
            echo "$HELP"
            exit 
            ;;
        
        "i"|"init" )
            skf.init && echo "A website was initialized in $(pwd)."
            exit 
            ;; 
        
        "w"|"watch" )
            export WATCH=1
            export SRC_DIR="$(readlink -m "${OPTARG}" )" 
            ;; 
            
        "g"|"generate" )
            export GENERATE=1
            export SRC_DIR="$(readlink -m "${OPTARG}" )" 
            ;;
            
        "r"|"recursive" )
            export RECURSIVE=1 
            ;;
        
        "f"|"force" )
            export FORCE=1 
            ;;
    esac
done


# Get last argument (DST_DIR)
for DST_DIR in $@ ; do : ; done
export DST_DIR="$DST_DIR"

# Making sure that last argument DST_DIR is not a switch
if [[ ${DST_DIR:0:1} == '-' ]]
then 
    cat << EOF 
The destination directory should be at the end. If your destination 
directory begins with a dash, please prepend it with "./" or use an absolute 
path. 
EOF
    exit
fi

# Making sure that the source and the destination are
# not the same directory. 
if [[ $SRC_DIR == $DST_DIR ]] && [[ -z $FORCE ]]
then
    cat << EOF
SRC_DIR and DST_DIR are the same directories. Use the -f (--force) flag to 
ignore this conflict. (Be aware that you might lose some work.)
To obtain some help: skf -h or skf --help
EOF
    exit
fi

# Making sure that one and only one out of the -w and -g switches 
# are used. 
if [[ -z $WATCH ]] && [[ -z $GENERATE ]] || [[ $GENERATE == $WATCH ]]
then
    echo "One and only one mode (-w or -g) is mandatory. "
    echo "$HELP"
    exit
fi


DST_DIR="$(readlink -m "$DST_DIR")"

# We want to catch ctrl+c (SIGINT)
control_c () {
    echo -en "\n*** Yep. You done it. You killed me. ***"
    echo -en "\n***   Killing any remaing process.   ***\n"
    for pid in $(jobs -p) 
    do
        kill -9 $pid 2> /dev/null && echo "killed pid:$pid"
    done
    exit $?
}
trap control_c SIGINT

# Generating websites 
skf.gen "$SRC_DIR" "$DST_DIR" &

# Telling it to the user 
[[ -z $GENERATE ]] || echo -n "generating your website..."
[[ -z $WATCH ]]    || echo -n "watching changes..."

# Waiting until all jobs are done 
#wait $(jobs -p) 

roller=(/ â€“ \\ \|); 
i=0; 
while ps $(jobs -p) > /dev/null
do 
    printf '%s' ${roller[$i]}
    sleep 0.1
    printf '\b'
    [[ $i -lt 2 ]] && ((i+=1)) || ((i=0))
done

echo "DONE!"
